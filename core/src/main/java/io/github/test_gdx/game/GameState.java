package io.github.test_gdx.game;

/**
 * GameState — перечисление (enum) всех возможных состояний игры
 * <p>
 * Зачем нужно?
 * - Четко определяет, в каких состояниях может быть игра
 * - Избегаем магических строк типа "PLAYING", "GAME_OVER" и т.д.
 * - Компилятор проверяет опечатки (если напишешь неправильное состояние — ошибка)
 * - Удобно использовать в switch-case
 * <p>
 * Использование:
 * gameState = GameState.PLAYING;
 * if (gameState == GameState.GAME_OVER) { ... }
 * switch (gameState) { ... }
 * <p>
 * Enum — это класс, который может принимать только определённые значения.
 * Это как "список разрешённых вариантов".
 */
public enum GameState {

    /**
     * PLAYING — игра идёт
     * <p>
     * Что происходит:
     * - Физика работает (гравитация, движение)
     * - Обработка ввода работает
     * - Персонаж может прыгать
     * - Платформы генерируются
     * <p>
     * Когда переходим в это состояние:
     * - При начале игры
     * - При перезагрузке (restart)
     */
    PLAYING,

    /**
     * GAME_OVER — игра кончилась
     * <p>
     * Что происходит:
     * - Физика ОСТАНАВЛИВАЕТСЯ (персонаж больше не движется)
     * - Ввод НЕ обрабатывается (нельзя прыгать)
     * - На экран выводится "GAME OVER" текст
     * - Показывается счёт
     * - Возможность перезагрузки (нажать SPACE)
     * <p>
     * Когда переходим в это состояние:
     * - Персонаж упал ниже видимой области
     * - Энергия = 0 (позже)
     * - Столкновение с опасностью (позже)
     */
    GAME_OVER,

    /**
     * PAUSED — игра на паузе (ПОЗЖЕ)
     * <p>
     * Зарезервировано для будущего использования.
     * Когда-нибудь можно добавить паузу (нажать P).
     * <p>
     * Что происходит:
     * - Физика停止 (персонаж зависает в воздухе)
     * - Ввод НЕ обрабатывается (кроме возобновления игры)
     * - На экран выводится "PAUSED" текст
     */
    PAUSED,

    /**
     * LOADING — загрузка (ПОЗЖЕ)
     * <p>
     * Зарезервировано для будущего использования.
     * Когда-нибудь может быть загрузка ресурсов.
     */
    LOADING;

    /**
     * isGameActive() — простой метод для проверки
     *
     * @return true если игра активна (идёт прямо сейчас)
     */
    public boolean isGameActive() {
        return this == PLAYING;
    }
}
